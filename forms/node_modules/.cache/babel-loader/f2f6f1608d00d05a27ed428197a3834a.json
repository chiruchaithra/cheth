{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst inputHook = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = e => {\n    setEnteredValue(e.target.value);\n    setIsTouched(true);\n  };\n\n  const inputBlurHandler = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    isValid: valueIsValid\n  };\n};\n\n_s(inputHook, \"JyWJlNzgq2PDQZr6OheNcO/mHBA=\");\n\nexport default inputHook;","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/forms/src/customHook/inputHook.js"],"names":["React","useState","inputHook","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","e","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;AACA,MAAMC,SAAS,GAAIC,aAAD,IAAmB;AAAA;;AACjC,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCJ,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,eAAe,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACAN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACP,GAHD;;AAKA,QAAMO,gBAAgB,GAAG,MAAM;AACvBP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFL;;AAII,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,SAAO;AACPM,IAAAA,KAAK,EAAET,YADA;AACcK,IAAAA,QADd;AACwBC,IAAAA,kBADxB;AAC2CI,IAAAA,gBAD3C;AAC4DE,IAAAA,OAAO,EAACR;AADpE,GAAP;AAGP,CAvBD;;GAAMN,S;;AAwBN,eAAeA,SAAf","sourcesContent":["import React,{useState} from \"react\";\nconst inputHook = (validateValue) => {\n    const [enteredValue,setEnteredValue] = useState('')\n    const [isTouched, setIsTouched] = useState(false)\n\n    const valueIsValid = validateValue(enteredValue)\n    const hasError = !valueIsValid && isTouched;\n\n    const valueChangeHandler = (e) => {\n            setEnteredValue(e.target.value)\n            setIsTouched(true)\n    }\n\n    const inputBlurHandler = () => {\n            setIsTouched(true)\n        }\n\n        const reset = () => {\n            setEnteredValue('')\n            setIsTouched(false)\n        }\n        return {\n        value: enteredValue, hasError, valueChangeHandler,inputBlurHandler,isValid:valueIsValid\n        }\n}\nexport default inputHook"]},"metadata":{},"sourceType":"module"}