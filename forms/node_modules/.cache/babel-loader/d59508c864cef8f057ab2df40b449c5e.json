{"ast":null,"code":"var _jsxFileName = \"/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport useInputCustomHook from '../customHook/useInputHook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // const [enteredValue,setEnteredValue] = useState('')\n  // const [enterNameTouched, setEnterNameTouched] = useState(false)\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChaneHandler,\n    inputBlurHandler: nameBlurHandler,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput\n  } = useInputCustomHook(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailEnterNameTouched, setEmailEnterNameTouched] = useState(false);\n  console.log('enteredNameIsValid', enteredNameIsValid); //     const enteredNameIsValid = enteredValue.trim() !== ''\n  // const nameInputFieldIsInvalid = !enteredNameIsValid && enterNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && emailEnterNameTouched;\n  let formDisabled = false; // if(enteredNameIsValid && enteredEmailIsValid) {\n  //     formDisabled=true\n  // }\n\n  if (enteredNameIsValid) {\n    formDisabled = true;\n  }\n\n  const inputChangeHandle = (e, type) => {\n    setEnteredEmail(e.target.value);\n    setEmailEnterNameTouched(true);\n  }; // const inputChangeHandle = (e,type) => {\n  //     if(type === 'name')\n  //     {\n  //         setEnteredValue(e.target.value)\n  //         setEnterNameTouched(true)\n  //\n  //     } else {\n  //         setEnteredEmail(e.target.value)\n  //         setEmailEnterNameTouched(true)\n  //     }\n  // }\n  // const inputBlurHandle = (e,type) => {\n  //     if(type === 'name') {\n  //         setEnterNameTouched(true)\n  //     } else {\n  //         setEmailEnterNameTouched(true)\n  //     }\n  //\n  // }\n\n\n  const inputBlurHandle = (e, type) => {\n    setEmailEnterNameTouched(true);\n  };\n\n  const onSubmitHAndler = e => {\n    e.preventDefault();\n    setEmailEnterNameTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    setEmailEnterNameTouched(false);\n    setEnteredEmail('');\n  };\n\n  const inputValue = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailValue = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHAndler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onBlur: nameBlurHandler,\n        onChange: nameChaneHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: e => {\n          inputChangeHandle(e, 'email');\n        },\n        value: enteredEmail,\n        onBlur: e => {\n          inputBlurHandle(e, 'email');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formDisabled,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"ylkQ0MxzQmerKtPCGEee6xkQFkQ=\", false, function () {\n  return [useInputCustomHook];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js"],"names":["React","useState","useRef","useInputCustomHook","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameChaneHandler","inputBlurHandler","nameBlurHandler","isValid","enteredNameIsValid","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","emailEnterNameTouched","setEmailEnterNameTouched","console","log","enteredEmailIsValid","includes","emailInputIsInvalid","formDisabled","inputChangeHandle","e","type","target","inputBlurHandle","onSubmitHAndler","preventDefault","inputValue","emailValue"],"mappings":"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","sourcesContent":["import React,{useState,useRef} from \"react\";\nimport  useInputCustomHook from '../customHook/useInputHook'\nconst SimpleInput = (props) => {\n    // const [enteredValue,setEnteredValue] = useState('')\n    // const [enterNameTouched, setEnterNameTouched] = useState(false)\n   const { value: enteredName, hasError: nameInputHasError, valueChangeHandler:nameChaneHandler,\n       inputBlurHandler:nameBlurHandler,isValid:enteredNameIsValid,reset:resetNameInput\n   } = useInputCustomHook( value => value.trim()!== '')\n    const [enteredEmail,setEnteredEmail] = useState('')\n    const [emailEnterNameTouched, setEmailEnterNameTouched] = useState(false)\n\nconsole.log('enteredNameIsValid',enteredNameIsValid)\n\n//     const enteredNameIsValid = enteredValue.trim() !== ''\n// const nameInputFieldIsInvalid = !enteredNameIsValid && enterNameTouched;\n\nconst enteredEmailIsValid = enteredEmail.includes('@')\nconst emailInputIsInvalid = !enteredEmailIsValid && emailEnterNameTouched\n\n\n    let formDisabled = false\n    // if(enteredNameIsValid && enteredEmailIsValid) {\n    //     formDisabled=true\n    // }\n\n    if(enteredNameIsValid) {\n        formDisabled=true\n    }\n    const inputChangeHandle = (e,type) => {\n            setEnteredEmail(e.target.value)\n            setEmailEnterNameTouched(true)\n    }\n\n    // const inputChangeHandle = (e,type) => {\n    //     if(type === 'name')\n    //     {\n    //         setEnteredValue(e.target.value)\n    //         setEnterNameTouched(true)\n    //\n    //     } else {\n    //         setEnteredEmail(e.target.value)\n    //         setEmailEnterNameTouched(true)\n    //     }\n    // }\n\n    // const inputBlurHandle = (e,type) => {\n    //     if(type === 'name') {\n    //         setEnterNameTouched(true)\n    //     } else {\n    //         setEmailEnterNameTouched(true)\n    //     }\n    //\n    // }\n    const inputBlurHandle = (e,type) => {\n            setEmailEnterNameTouched(true)\n\n    }\n\n    const onSubmitHAndler = (e) => {\n        e.preventDefault()\n        setEmailEnterNameTouched(true)\n        if(!enteredNameIsValid && !enteredEmailIsValid) {\n            return\n        }\n        resetNameInput()\n\n        setEmailEnterNameTouched(false)\n        setEnteredEmail('')\n\n\n\n    }\n\nconst inputValue = nameInputHasError ? 'form-control invalid' : 'form-control'\nconst emailValue = emailInputIsInvalid ? 'form-control invalid' : 'form-control'\n  return (\n    <form onSubmit={onSubmitHAndler}>\n      <div className={inputValue}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name'\n               value={enteredName}\n               onBlur={nameBlurHandler}\n               onChange={nameChaneHandler}/>\n          {nameInputHasError  && <p className=\"error-text\">Name should not be empty</p>}\n      </div>\n\n        <div className={emailValue}>\n            <label htmlFor='name'>Your Email</label>\n            <input type='email'\n                   id='email'\n                   onChange={(e) => {inputChangeHandle(e,'email')}}\n                   value={enteredEmail}\n                   onBlur={(e) => {inputBlurHandle(e,'email')}}\n            />\n            {emailInputIsInvalid  && <p className=\"error-text\">Email should not be empty</p>}\n\n        </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formDisabled} >Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}