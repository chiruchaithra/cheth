{"ast":null,"code":"var _jsxFileName = \"/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport useInputCustomHook from '../customHook/useInputHook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // const [enteredValue,setEnteredValue] = useState('')\n  // const [enterNameTouched, setEnterNameTouched] = useState(false)\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChaneHandler,\n    inputBlurHandler: nameBlurHandler,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput\n  } = useInputCustomHook(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    hasError: nameEmailInputHasError,\n    valueChangeHandler: emailNameChaneHandler,\n    inputBlurHandler: emailNameBlurHandler,\n    isValid: enteredEmailNameIsValid,\n    reset: resetEmailNameInput\n  } = useInputCustomHook(value => value.includes('@'));\n  let formDisabled = false;\n\n  if (enteredNameIsValid && enteredEmailNameIsValid) {\n    formDisabled = true;\n  } // if(enteredNameIsValid) {\n  //     formDisabled=true\n  // }\n  // const inputChangeHandle = (e,type) => {\n  //         setEnteredEmail(e.target.value)\n  //         setEmailEnterNameTouched(true)\n  // }\n  // const inputChangeHandle = (e,type) => {\n  //     if(type === 'name')\n  //     {\n  //         setEnteredValue(e.target.value)\n  //         setEnterNameTouched(true)\n  //\n  //     } else {\n  //         setEnteredEmail(e.target.value)\n  //         setEmailEnterNameTouched(true)\n  //     }\n  // }\n  // const inputBlurHandle = (e,type) => {\n  //     if(type === 'name') {\n  //         setEnterNameTouched(true)\n  //     } else {\n  //         setEmailEnterNameTouched(true)\n  //     }\n  //\n  // }\n  // const inputBlurHandle = (e,type) => {\n  //         setEmailEnterNameTouched(true)\n  //\n  // }\n\n\n  const onSubmitHAndler = e => {\n    e.preventDefault();\n\n    if (!enteredNameIsValid && !enteredEmailNameIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    resetEmailNameInput();\n  };\n\n  const inputValue = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailValue = nameEmailInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHAndler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onBlur: nameBlurHandler,\n        onChange: nameChaneHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailNameChaneHandler,\n        value: enteredEmail,\n        onBlur: emailNameBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), nameEmailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formDisabled,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"wakiC2SU13wSRcsc6PjbMMd1HWk=\", false, function () {\n  return [useInputCustomHook, useInputCustomHook];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js"],"names":["React","useState","useRef","useInputCustomHook","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameChaneHandler","inputBlurHandler","nameBlurHandler","isValid","enteredNameIsValid","reset","resetNameInput","trim","enteredEmail","nameEmailInputHasError","emailNameChaneHandler","emailNameBlurHandler","enteredEmailNameIsValid","resetEmailNameInput","includes","formDisabled","onSubmitHAndler","e","preventDefault","inputValue","emailValue"],"mappings":"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","sourcesContent":["import React,{useState,useRef} from \"react\";\nimport  useInputCustomHook from '../customHook/useInputHook'\nconst SimpleInput = (props) => {\n    // const [enteredValue,setEnteredValue] = useState('')\n    // const [enterNameTouched, setEnterNameTouched] = useState(false)\n   const { value: enteredName, hasError: nameInputHasError, valueChangeHandler:nameChaneHandler,\n       inputBlurHandler:nameBlurHandler,isValid:enteredNameIsValid,reset:resetNameInput\n   } = useInputCustomHook( value => value.trim()!== '')\n\n    const{\n        value: enteredEmail, hasError: nameEmailInputHasError, valueChangeHandler:emailNameChaneHandler,\n        inputBlurHandler:emailNameBlurHandler,isValid:enteredEmailNameIsValid,reset:resetEmailNameInput\n    }=useInputCustomHook(value => value.includes('@'))\n\n    let formDisabled = false\n    if(enteredNameIsValid && enteredEmailNameIsValid) {\n        formDisabled=true\n    }\n\n    // if(enteredNameIsValid) {\n    //     formDisabled=true\n    // }\n    // const inputChangeHandle = (e,type) => {\n    //         setEnteredEmail(e.target.value)\n    //         setEmailEnterNameTouched(true)\n    // }\n\n    // const inputChangeHandle = (e,type) => {\n    //     if(type === 'name')\n    //     {\n    //         setEnteredValue(e.target.value)\n    //         setEnterNameTouched(true)\n    //\n    //     } else {\n    //         setEnteredEmail(e.target.value)\n    //         setEmailEnterNameTouched(true)\n    //     }\n    // }\n\n    // const inputBlurHandle = (e,type) => {\n    //     if(type === 'name') {\n    //         setEnterNameTouched(true)\n    //     } else {\n    //         setEmailEnterNameTouched(true)\n    //     }\n    //\n    // }\n    // const inputBlurHandle = (e,type) => {\n    //         setEmailEnterNameTouched(true)\n    //\n    // }\n\n    const onSubmitHAndler = (e) => {\n        e.preventDefault()\n        if(!enteredNameIsValid && !enteredEmailNameIsValid) {\n            return\n        }\n        resetNameInput()\n        resetEmailNameInput()\n\n    }\n\nconst inputValue = nameInputHasError ? 'form-control invalid' : 'form-control'\nconst emailValue = nameEmailInputHasError ? 'form-control invalid' : 'form-control'\n  return (\n    <form onSubmit={onSubmitHAndler}>\n      <div className={inputValue}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name'\n               value={enteredName}\n               onBlur={nameBlurHandler}\n               onChange={nameChaneHandler}/>\n          {nameInputHasError  && <p className=\"error-text\">Name should not be empty</p>}\n      </div>\n\n        <div className={emailValue}>\n            <label htmlFor='name'>Your Email</label>\n            <input type='email'\n                   id='email'\n                   onChange={emailNameChaneHandler}\n                   value={enteredEmail}\n                   onBlur={emailNameBlurHandler}\n            />\n            {nameEmailInputHasError  && <p className=\"error-text\">Email should not be empty</p>}\n\n        </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formDisabled} >Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}