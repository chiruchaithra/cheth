{"ast":null,"code":"var _jsxFileName = \"/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport InputHook from '../customHook/inputHook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // const [enteredValue,setEnteredValue] = useState('')\n  // const [enterNameTouched, setEnterNameTouched] = useState(false)\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailEnterNameTouched, setEmailEnterNameTouched] = useState(false); //     const enteredNameIsValid = enteredValue.trim() !== ''\n  // const nameInputFieldIsInvalid = !enteredNameIsValid && enterNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && emailEnterNameTouched;\n  let formDisabled = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formDisabled = true;\n  }\n\n  const inputChangeHandle = (e, type) => {\n    if (type === 'name') {\n      setEnteredValue(e.target.value);\n      setEnterNameTouched(true);\n    } else {\n      setEnteredEmail(e.target.value);\n      setEmailEnterNameTouched(true);\n    }\n  };\n\n  const inputBlurHandle = (e, type) => {\n    if (type === 'name') {\n      setEnterNameTouched(true);\n    } else {\n      setEmailEnterNameTouched(true);\n    }\n  };\n\n  const onSubmitHAndler = e => {\n    e.preventDefault();\n    setEnterNameTouched(true);\n    setEmailEnterNameTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    setEnteredValue('');\n    setEnteredEmail('');\n    setEnterNameTouched(false);\n    setEmailEnterNameTouched(false);\n  };\n\n  const inputValue = nameInputFieldIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailValue = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHAndler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredValue,\n        onBlur: e => {\n          inputBlurHandle(e, 'name');\n        },\n        onChange: e => {\n          inputChangeHandle(e, 'name');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), nameInputFieldIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailValue,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: e => {\n          inputChangeHandle(e, 'email');\n        },\n        value: enteredEmail,\n        onBlur: e => {\n          inputBlurHandle(e, 'email');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formDisabled,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"gJMf2Bo6xj4jj5fiKE34sl33tfI=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/forms/src/components/SimpleInput.js"],"names":["React","useState","useRef","InputHook","SimpleInput","props","enteredEmail","setEnteredEmail","emailEnterNameTouched","setEmailEnterNameTouched","enteredEmailIsValid","includes","emailInputIsInvalid","formDisabled","enteredNameIsValid","inputChangeHandle","e","type","setEnteredValue","target","value","setEnterNameTouched","inputBlurHandle","onSubmitHAndler","preventDefault","inputValue","nameInputFieldIsInvalid","emailValue","enteredValue"],"mappings":"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","sourcesContent":["import React,{useState,useRef} from \"react\";\nimport  InputHook from '../customHook/inputHook'\nconst SimpleInput = (props) => {\n    // const [enteredValue,setEnteredValue] = useState('')\n    // const [enterNameTouched, setEnterNameTouched] = useState(false)\n    const [enteredEmail,setEnteredEmail] = useState('')\n    const [emailEnterNameTouched, setEmailEnterNameTouched] = useState(false)\n\n\n\n//     const enteredNameIsValid = enteredValue.trim() !== ''\n// const nameInputFieldIsInvalid = !enteredNameIsValid && enterNameTouched;\n\nconst enteredEmailIsValid = enteredEmail.includes('@')\nconst emailInputIsInvalid = !enteredEmailIsValid && emailEnterNameTouched\n\n\n    let formDisabled = false\n    if(enteredNameIsValid && enteredEmailIsValid) {\n        formDisabled=true\n    }\n\n    const inputChangeHandle = (e,type) => {\n        if(type === 'name')\n        {\n            setEnteredValue(e.target.value)\n            setEnterNameTouched(true)\n\n        } else {\n            setEnteredEmail(e.target.value)\n            setEmailEnterNameTouched(true)\n        }\n    }\n\n    const inputBlurHandle = (e,type) => {\n        if(type === 'name') {\n            setEnterNameTouched(true)\n        } else {\n            setEmailEnterNameTouched(true)\n        }\n\n    }\n\n    const onSubmitHAndler = (e) => {\n        e.preventDefault()\n        setEnterNameTouched(true)\n        setEmailEnterNameTouched(true)\n        if(!enteredNameIsValid && !enteredEmailIsValid) {\n            return\n        }\n        setEnteredValue('')\n        setEnteredEmail('')\n        setEnterNameTouched(false)\n        setEmailEnterNameTouched(false)\n\n\n    }\n\nconst inputValue = nameInputFieldIsInvalid ? 'form-control invalid' : 'form-control'\nconst emailValue = emailInputIsInvalid ? 'form-control invalid' : 'form-control'\n  return (\n    <form onSubmit={onSubmitHAndler}>\n      <div className={inputValue}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name'\n               value={enteredValue}\n               onBlur={(e) => {inputBlurHandle(e,'name')}}\n               onChange={ (e) => {inputChangeHandle(e,'name')}}/>\n          {nameInputFieldIsInvalid  && <p className=\"error-text\">Name should not be empty</p>}\n      </div>\n\n        <div className={emailValue}>\n            <label htmlFor='name'>Your Email</label>\n            <input type='email'\n                   id='email'\n                   onChange={(e) => {inputChangeHandle(e,'email')}}\n                   value={enteredEmail}\n                   onBlur={(e) => {inputBlurHandle(e,'email')}}\n            />\n            {emailInputIsInvalid  && <p className=\"error-text\">Email should not be empty</p>}\n\n        </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formDisabled} >Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}