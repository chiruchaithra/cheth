{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartReducer = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCard: (state, action) => {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          name: newItem.name,\n          description: newItem.description\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCard: (state, action) => {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nexport const cartSliceActions = cartReducer.actions;\nexport default cartReducer.reducer;","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/Advanced redux/src/store/cartReducer.js"],"names":["createSlice","initialState","items","totalQuantity","cartReducer","name","reducers","addItemToCard","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","description","totalPrice","removeItemFromCard","filter","cartSliceActions","actions","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,EADW;AAEjBC,EAAAA,aAAa,EAAC;AAFG,CAArB;AAIA,MAAMC,WAAW,GAAGJ,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAC,MADuB;AAE5BJ,EAAAA,YAF4B;AAG5BK,EAAAA,QAAQ,EAAC;AACLC,IAAAA,aAAa,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAiB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;AACAP,MAAAA,KAAK,CAACL,aAAN;;AACA,UAAG,CAACS,YAAJ,EAAkB;AACdJ,QAAAA,KAAK,CAACN,KAAN,CAAYc,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAACL,OAAO,CAACK,EADE;AAEbE,UAAAA,KAAK,EAACP,OAAO,CAACO,KAFD;AAGbC,UAAAA,QAAQ,EAAC,CAHI;AAIbb,UAAAA,IAAI,EAACK,OAAO,CAACL,IAJA;AAKbc,UAAAA,WAAW,EAACT,OAAO,CAACS;AALP,SAAjB;AAOH,OARD,MAQO;AACJP,QAAAA,YAAY,CAACM,QAAb;AACKN,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACO,KAA5D;AACP;AACA,KAjBA;AAmBLI,IAAAA,kBAAkB,EAAG,CAACb,KAAD,EAAOC,MAAP,KAAkB;AACnC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACL,aAAN;;AACA,UAAGS,YAAY,CAACM,QAAb,KAA0B,CAA7B,EAAgC;AAC5BV,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYoB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AAEH,OAHD,MAGO;AACFH,QAAAA,YAAY,CAACM,QAAb;AACGN,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACK,KAAjE;AACP;AACJ;AA9BI;AAHmB,CAAD,CAA/B;AAuCA,OAAO,MAAOM,gBAAgB,GAAGnB,WAAW,CAACoB,OAAtC;AACP,eAAepB,WAAW,CAACqB,OAA3B","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst initialState = {\n    items:[],\n    totalQuantity:0\n}\nconst cartReducer = createSlice({\n    name:'cart',\n    initialState,\n    reducers:{\n        addItemToCard:(state,action)=> {\n            const newItem = action.payload\n            const existingItem = state.items.find(item => item.id === newItem.id)\n            state.totalQuantity++;\n            if(!existingItem) {\n                state.items.push({\n                    id:newItem.id,\n                    price:newItem.price,\n                    quantity:1,\n                    name:newItem.name,\n                    description:newItem.description\n                })\n            } else {\n               existingItem.quantity++;\n                    existingItem.totalPrice = existingItem.totalPrice + newItem.price\n            }\n            },\n\n        removeItemFromCard : (state,action) => {\n            const id = action.payload\n            const existingItem = state.items.find(item => item.id === id)\n            state.totalQuantity--;\n            if(existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== id)\n\n            } else {\n                 existingItem.quantity--;\n                    existingItem.totalPrice = existingItem.totalPrice - existingItem.price\n            }\n        }\n    }\n})\n\n\n\nexport const  cartSliceActions = cartReducer.actions\nexport default cartReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}