{"ast":null,"code":"var _jsxFileName = \"/Users/chaithrams/Downloads/HttpRequest/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMovies = async () => {\n    // This is by using asynchrouous call of then\n    // fetch('https://swapi.dev/api/films').then((response) => {\n    //     return response.json()}).then((data) => {\n    //        const transformedMovies = data.results.map(movie => {\n    //            return {\n    //                id:movie.episode_id,\n    //                title:movie.title,\n    //                releaseDate:movie.release_date,\n    //                openingText: movie.opening_crawl\n    //            }\n    //        })\n    //     setMovies(transformedMovies)\n    //\n    // })\n    // This simplifies asynchrous call by async and await\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films');\n\n      if (!response.ok) {\n        throw new Error('something went wrong');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          releaseDate: movie.release_date,\n          openingText: movie.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 47\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 59\n    }\n  }, \"Found no movies\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Loading....\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 35\n    }\n  }, error)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chaithrams/Downloads/HttpRequest/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovies","response","fetch","ok","Error","data","json","transformedMovies","results","map","movie","id","episode_id","title","releaseDate","release_date","openingText","opening_crawl","message","length"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,IAAD,CAAjC;;AAEF,QAAOS,WAAW,GAAG,YAAY;AAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;AACA,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,KAAK,IAAI;AAChD,eAAO;AACHC,UAAAA,EAAE,EAACD,KAAK,CAACE,UADN;AAEHC,UAAAA,KAAK,EAACH,KAAK,CAACG,KAFT;AAGHC,UAAAA,WAAW,EAACJ,KAAK,CAACK,YAHf;AAIHC,UAAAA,WAAW,EAAEN,KAAK,CAACO;AAJhB,SAAP;AAMH,OAPyB,CAA1B;AAQAtB,MAAAA,SAAS,CAACY,iBAAD,CAAT;AACH,KAfD,CAeE,OAAOT,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACH;;AAEDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAxCD;;AA0CA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACJ,SAAD,IAAcF,MAAM,CAACyB,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEzB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxC,EAEK,CAACE,SAAD,IAAcF,MAAM,CAACyB,MAAP,KAAkB,CAAhC,IAAqC,CAACrB,KAAtC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFpD,EAGKF,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHlB,EAIK,CAACA,SAAD,IAAcE,KAAd,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAJ5B,CAJF,CADF;AAcD;;AAED,eAAeL,GAAf","sourcesContent":["import React,{useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [error,setError] = useState(null)\n\n  const  fetchMovies = async () => {\n        // This is by using asynchrouous call of then\n      // fetch('https://swapi.dev/api/films').then((response) => {\n      //     return response.json()}).then((data) => {\n      //        const transformedMovies = data.results.map(movie => {\n      //            return {\n      //                id:movie.episode_id,\n      //                title:movie.title,\n      //                releaseDate:movie.release_date,\n      //                openingText: movie.opening_crawl\n      //            }\n      //        })\n      //     setMovies(transformedMovies)\n      //\n      // })\n\n\n      // This simplifies asynchrous call by async and await\n      setIsLoading(true)\n      setError(null)\n      try {\n          const response = await fetch('https://swapi.dev/api/films')\n          if(!response.ok) {\n              throw new Error('something went wrong')\n          }\n          const data = await response.json()\n          const transformedMovies = data.results.map(movie => {\n              return {\n                  id:movie.episode_id,\n                  title:movie.title,\n                  releaseDate:movie.release_date,\n                  openingText: movie.opening_crawl\n              }\n          })\n          setMovies(transformedMovies)\n      } catch (error) {\n          setError(error.message)\n      }\n\n      setIsLoading(false)\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovies}>Fetch Movies</button>\n      </section>\n      <section>\n          {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n          {!isLoading && movies.length === 0 && !error && <p>Found no movies</p>}\n          {isLoading && <p>Loading....</p>}\n          {!isLoading && error && <p>{error}</p>}\n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}