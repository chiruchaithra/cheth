{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending'\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed'\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed'\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction) {\n  _s();\n\n  let startWithPending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  console.log('requestFunction', requestFunction);\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null\n  });\n  const sendRequest = useCallback(async function (requestData) {\n    console.log('requestData', requestData);\n    dispatch({\n      type: 'SEND'\n    });\n\n    try {\n      const responseData = await requestFunction(requestData);\n      dispatch({\n        type: 'SUCCESS',\n        responseData\n      });\n    } catch (error) {\n      dispatch({\n        type: 'ERROR',\n        errorMessage: error.message || 'Something went wrong!'\n      });\n    }\n  }, [requestFunction]);\n  return {\n    sendRequest,\n    ...httpState\n  };\n}\n\n_s(useHttp, \"7Qew6E1pBmm3SF5eGZwOviyWzfw=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/chaithrams/Documents/cheth/React-Router1/src/components/hooks/use-http.js"],"names":["useReducer","useCallback","httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","console","log","httpState","dispatch","sendRequest","requestData","message"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,MAAIJ,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,WAAO;AACLC,MAAAA,IAAI,EAAEF,MAAM,CAACK,YADR;AAELF,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,MAAIJ,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,KAAK,EAAEH,MAAM,CAACM,YAFT;AAGLF,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,SAAOL,KAAP;AACD;;AAED,SAASQ,OAAT,CAAiBC,eAAjB,EAA4D;AAAA;;AAAA,MAA1BC,gBAA0B,uEAAP,KAAO;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BH,eAA9B;AACA,QAAM,CAACI,SAAD,EAAYC,QAAZ,IAAwBjB,UAAU,CAACE,WAAD,EAAc;AACpDM,IAAAA,MAAM,EAAEK,gBAAgB,GAAG,SAAH,GAAe,IADa;AAEpDP,IAAAA,IAAI,EAAE,IAF8C;AAGpDC,IAAAA,KAAK,EAAE;AAH6C,GAAd,CAAxC;AAMA,QAAMW,WAAW,GAAGjB,WAAW,CAC7B,gBAAgBkB,WAAhB,EAA6B;AAC3BL,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BI,WAA1B;AACAF,IAAAA,QAAQ,CAAC;AAAEZ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMI,YAAY,GAAG,MAAMG,eAAe,CAACO,WAAD,CAA1C;AACAF,MAAAA,QAAQ,CAAC;AAAEZ,QAAAA,IAAI,EAAE,SAAR;AAAmBI,QAAAA;AAAnB,OAAD,CAAR;AACD,KAHD,CAGE,OAAOF,KAAP,EAAc;AACdU,MAAAA,QAAQ,CAAC;AACPZ,QAAAA,IAAI,EAAE,OADC;AAEPK,QAAAA,YAAY,EAAEH,KAAK,CAACa,OAAN,IAAiB;AAFxB,OAAD,CAAR;AAID;AACF,GAb4B,EAc7B,CAACR,eAAD,CAd6B,CAA/B;AAiBA,SAAO;AACLM,IAAAA,WADK;AAEL,OAAGF;AAFE,GAAP;AAID;;GA7BQL,O;;AA+BT,eAAeA,OAAf","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  console.log('requestFunction',requestFunction)\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      console.log('requestData',requestData)\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}